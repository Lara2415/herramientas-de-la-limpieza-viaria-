# -*- coding: utf-8 -*-
"""
/***************************************************************************
 sectores
                                 A QGIS plugin
 sectores
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-27
        git sha              : $Format:%H$
        copyright            : (C) 2024 by eva
        email                : evalara.lopez@edu.uah.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from .resources import *
from .sectores_dialog import SectoresDialog
import math
from qgis.core import QgsField, QgsFeature, QgsGeometry, QgsExpression, QgsFeatureRequest
from PyQt5.QtCore import QVariant
from PyQt5.QtWidgets import QInputDialog, QMessageBox
from sklearn.cluster import KMeans
from qgis.utils import iface


class sectores:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'sectores_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&sectores')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('sectores', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sectores/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'sectores'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&sectores'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SectoresDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # Definir la función para obtener el número de sectores deseado
 
         
            def obtener_valor_numerico(mensaje):
                """
                Muestra un cuadro de diálogo para que el usuario ingrese un valor numérico.
                
                Args:
                    mensaje (str): El mensaje a mostrar en el cuadro de diálogo.
                    
                Returns:
                    int or None: El valor numérico ingresado por el usuario, o None si se cancela.
                """
                i, okPressed = QInputDialog.getInt(None, "Número de Sectores", mensaje, 1, 1, 100, 1)
                if okPressed:
                    return i
                else:
                    return None

            # Obtiene la capa activa en QGIS
            capa = iface.activeLayer()
            if not capa:
                QMessageBox.critical(None, "Error", "No hay ninguna capa activa.")
                exit()

            # Nombre del campo que se espera en la capa
            campo_nivel = 'NIVE'
            # Verifica si el campo existe en la capa
            if campo_nivel not in [field.name() for field in capa.fields()]:
                QMessageBox.critical(None, "Error", f"El campo '{campo_nivel}' no existe en la capa.")
                exit()

            # Inicia la edición en la capa
            capa.startEditing()

            # Agrega un nuevo campo 'Sectores' para almacenar los resultados
            capa.dataProvider().addAttributes([QgsField("Sectores", QVariant.String)])
            capa.updateFields()

            # Obtiene los valores únicos del campo 'NIVE'
            niveles = capa.uniqueValues(capa.fields().indexFromName(campo_nivel))

            for nivel in niveles:
                # Filtra las características de la capa según el valor del campo 'NIVE'
                exp_filtro = QgsExpression(f'"{campo_nivel}"=\'{nivel}\'')
                seleccion = capa.getFeatures(QgsFeatureRequest(exp_filtro))
                features = [f for f in seleccion]
                
                if not features:
                    QMessageBox.warning(None, "Advertencia", f"No se encontraron características para el nivel '{nivel}'.")
                    continue

                # Calcula la longitud total de las geometrías seleccionadas
                longitud_total = sum([f.geometry().length() for f in features])
                
                # Obtiene el número de sectores deseado del usuario
                num_sectores = obtener_valor_numerico("Ingrese el número de sectores deseado")
                if num_sectores is None:
                    QMessageBox.information(None, "Operación Cancelada", "Operación cancelada por el usuario.")
                    continue

                # Calcula la longitud objetivo para cada sector
                longitud_objetivo = longitud_total / num_sectores
                geometrias = [f.geometry() for f in features]
                puntos = [g.centroid().asPoint() for g in geometrias]
                puntos_coord = [(p.x(), p.y()) for p in puntos]
                
                while True:
                    # Aplica el algoritmo KMeans para agrupar puntos en el número de sectores deseado
                    kmeans = KMeans(n_clusters=num_sectores)
                    kmeans.fit(puntos_coord)
                    centroides = kmeans.cluster_centers_
                    asignaciones = kmeans.labels_
                    
                    # Calcula la longitud total de los sectores formados
                    sum_sectores = 0
                    for i in range(num_sectores):
                        indices = [j for j, x in enumerate(asignaciones) if x == i]
                        longitudes_sector = [geometrias[j].length() for j in indices]
                        sum_sectores += sum(longitudes_sector)
                    
                    # Verifica si la suma de las longitudes de los sectores es cercana a la longitud total
                    if abs(sum_sectores - longitud_total) / longitud_total * 100 < 5:
                        # Asigna el sector a cada característica y actualiza la capa
                        for i, feature in enumerate(features):
                            indice_grupo = asignaciones[i]
                            sector_formateado = 'Sector {:02d}'.format(indice_grupo + 1)
                            feature['Sectores'] = sector_formateado
                            capa.updateFeature(feature)
                        break
                    else:
                        # Si no se cumple la condición, reduce el número de sectores y vuelve a intentar
                        num_sectores -= 1
                        if num_sectores < 2:
                            QMessageBox.critical(None, "Error", "No se puede dividir la geometría en sectores similares.")
                            break
                
                # Muestra los resultados de la operación
                mensaje = (
                    "Nivel/Servicio: {}\n"
                    "Longitud total: {:.2f} metros\n"
                    "Longitud objetivo por sector: {:.2f} metros\n"
                    "Número de sectores: {}\n"
                    "------------------------------------"
                ).format(nivel, longitud_total, longitud_objetivo, num_sectores)
                QMessageBox.information(None, "Resultados", mensaje)

            # Finaliza la edición y aplica los cambios en la capa
            capa.commitChanges()
            capa.triggerRepaint()
